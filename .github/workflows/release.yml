name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Semantic versioning: v1.2.3, v1.2.3-alpha.1, etc.

jobs:
  validate-tag:
    name: Validate Semantic Version Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}
    
    steps:
    - name: Validate semantic version
      id: validate
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Validating tag: $TAG"
        
        # Check if tag matches semantic versioning pattern
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\-[a-zA-Z0-9\.\-]+)?$ ]]; then
          echo "Error: Tag '$TAG' does not follow semantic versioning (v1.2.3 or v1.2.3-alpha.1)"
          exit 1
        fi
        
        # Extract version without 'v' prefix
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a prerelease (contains hyphen)
        if [[ $TAG =~ \- ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "Detected prerelease version: $TAG"
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "Detected stable release version: $TAG"
        fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Build Go binaries
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        BUILD_FLAGS="-ldflags=-w -s -X main.version=$VERSION"
        
        # Build for multiple platforms
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build $BUILD_FLAGS -o acme-linux-amd64 .
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build $BUILD_FLAGS -o acme-linux-arm64 .
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build $BUILD_FLAGS -o acme-darwin-amd64 .
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build $BUILD_FLAGS -o acme-darwin-arm64 .
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build $BUILD_FLAGS -o acme-windows-amd64.exe .
        
        # Make binaries executable
        chmod +x acme-*
        
    - name: Generate checksums
      run: |
        sha256sum acme-* > checksums.txt
        
    - name: Extract changelog entry
      id: changelog
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${{ needs.validate-tag.outputs.version }}
        
        # Try to extract changelog entry if CHANGELOG.md exists
        if [ -f CHANGELOG.md ]; then
          # Extract section for this version from CHANGELOG.md
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release-notes.md
        fi
        
        # If no changelog entry found, create default release notes
        if [ ! -s release-notes.md ]; then
          cat > release-notes.md << EOF
        ## nginx Reverse Proxy with ACME Certificate Management $TAG
        
        ### 🚀 Features
        - Automatic SSL certificate generation and renewal using ACME protocol
        - nginx reverse proxy with configurable backends  
        - Support for custom site configurations
        - Docker-based deployment with multi-architecture support
        - HTTP-01 challenge validation
        - TLS 1.3 and HTTP/2 support
        
        ### 🐳 Docker Images
        Available on Docker Hub with semantic versioning:
        - \`docker.io/[username]/reverse-proxy-acme:$VERSION\`
        - \`docker.io/[username]/reverse-proxy-acme:${VERSION%.*}\` (major.minor)
        - \`docker.io/[username]/reverse-proxy-acme:${VERSION%%.*}\` (major)
        
        **Supported architectures:** linux/amd64, linux/arm64
        
        ### 📚 Documentation
        See the [README](https://github.com/${{ github.repository }}/blob/$TAG/Readme.md) for detailed usage instructions.
        
        ### 🔍 Verification
        Binary checksums are included in this release for verification.
        EOF
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          acme-*
          checksums.txt
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-tag.outputs.is_prerelease }}
        generate_release_notes: true  # Auto-generate release notes from commits
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }